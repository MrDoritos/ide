#pragma once
#include <mutex>
#include <thread>
#include <condition_variable>

#include "advancedConsole.h"
#ifdef __WIN32
#include "dirent.h"
#elif defined __linux__
#include <dirent.h>
#endif
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <algorithm>

#include "box.h"

struct asyncDialog {
	std::mutex mux;
	std::condition_variable cond;
	std::thread worker;
	bool run;
};

struct dialog : public box {
	dialog() 
	{}
	
	dialog(box& mbox)
		:box(mbox)
	{}
	
	void fill(char c, char color) {
		//for (int x = offsetx; x < offsetx + sizex; x++) {
		//	for (int y = offsety; y < offsety + sizey; y++) {
		//		adv::write(x, y, c, color);
		//	}
		//}
		adv::fill(offsetx, offsety, offsetx + sizex, offsety + sizey, c, color);
	}
	
	void border(char color) {
		adv::border(offsetx, offsety, offsetx + sizex - 1, offsety + sizey - 1, color);
	}
	
	void fancyBorder(int type, char color) {
		adv::fancyBorder(offsetx, offsety, offsetx + sizex - 1, offsety + sizey - 1, type, color);
	}
	
	void title(const char* title, char color) {
		int l = strlen(title);
		{
			char buf[l + 3];
			int i = snprintf(&buf[0], l + 3, "[%s]", title);
			adv::write(offsetx + getOffsetX(0.5f, l), offsety, &buf[0], color);
		}
	}
};

struct button : dialog {
	button(box box)
		:dialog(box) 
	{}
		
	void show(const char* message, char color) {
		//adv::fill(offsetx, offsety, offsetx + sizex, offsety + sizey, ' ', BWHITE);
		fill(' ', BWHITE | FBLACK);
		//adv::rectangle(offsetx, offsety, offsetx + sizex, offsety + sizey, ' ', FRED | BWHITE | 0b00001000);
		border(FRED | 0b00001000 | BWHITE);
		int l = strlen(message);
		adv::write(getOffsetX(0.5f, l) + offsetx, getOffsetY(0.5f) + offsety, message, color);
	}
};

#define TEXTMODE_WRAP 0
#define TEXTMODE_CLIP 1 
#define TEXTMODE_IGNORE 2
#define TEXTMODE_END 3

//Wrapping and stuff like that
struct textBox : dialog {
	textBox(box box)
		:dialog(box)
	{}
		
	void show(const char* text, char color = FWHITE | BBLACK, int mode = TEXTMODE_END) {
		fill(' ', color);
		int l = strlen(text);

		if (l < sizex - 3) { //Fine, just show the text
			adv::write(offsetx, offsety, text, color);
		} else 
		if (l < sizex - 2) { //Right before the limit, show a block
			adv::write(offsetx, offsety, text, color);
			adv::write(offsetx + l, offsety, ' ', BWHITE | FBLACK);
		} else { //At the limit, clip text and show a block
			char clipped[l];
			strcpy(&clipped[0], text);
			clipped[sizex - 2] = '\0';
			adv::write(offsetx, offsety, text, color);
			adv::write(offsetx + sizex, offsety, ' ', BWHITE | FBLACK);
		}
	}
};

struct messageDialog : dialog {
	messageDialog(box box)
		:dialog(box)
	{}
	
	messageDialog() {}
	
	void show(const char* message) {
		//adv::fill(offsetx, offsety, offsetx + sizex, offsety + sizey, ' ', BWHITE);
		fill(' ', BWHITE);
		//adv::rectangle(offsetx, offsety, offsetx + sizex, offsety + sizey);
		border(FRED | 0b00001000 | BWHITE);
		button ok({this, mbx{0.5f, 0.8f, 10, 5}});
		ok.show("Ok", FRED | 0b00001000 | BWHITE);
		int key;
		textBox tb({});
		tb.show(message, FRED | 0b00001000 | BWHITE);
		while (NOMOD(key = console::readKey()) != ' ' && NOMOD(key) != VK_ENTER && NOMOD(key) != VK_ESCAPE);
	}
	
	void show(const std::string string) {
		show(string.c_str());
	}
		
	private:
		
};

struct openFileDialog : public dialog {
	openFileDialog() {
		setDirectory(".");
		lastDirectory = ".";
		lastSelected = 0;
		setListOffset(0);
		setSelected(0);
	}
	
	openFileDialog(box box) : dialog(box) {
		setDirectory(".");
		lastDirectory = ".";
		lastSelected = 0;
		setListOffset(0);
		setSelected(0);
	}
	
	void setListOffset(int x) {
		listOffset = x;
	}
	int getListOffset() {
		return listOffset;
	}
	void setDirectory(std::string dir) {
		getDirectoryFiles(dir.c_str());
	}
	int getSelected() {
		return selected;
	}
	void setSelected(int sel) {
		if (sel < files.size())
			selected = sel;
	}
	void getDirectory(std::string& dir) {
		dir = directory;
	}
	
	struct file {
		bool selected;
		bool highlighted;
		size_t size;
		std::string name;
		std::string fullpath;
		bool directory;
	};
	std::string directory;
	std::string lastDirectory;
	int listOffset;
	int selected;
	int lastSelected;
	
	int getFile(std::string& f) {
		//listOffset = 0;
		//selected = 0;
		//getDirectoryFiles(".");
		box tb(offsetx + 1, offsety + 1, sizex - 2, 1);
		textBox search (tb);
		textBox curDir ({offsetx + 1, offsety + sizey - 2, sizex - 2, 1});
		
		std::string buffer;
		int key = 0;
		adv::setThreadState(false);
		do {
			switch (NOMOD(key)) {				
				case VK_BACKSPACE: {
					if (buffer.size() > 0)
						buffer.pop_back();
					break;
				}			
				case VK_UP: {
					if (--selected < 0)
						selected = files.size() - 1;
					break;
				}
				case VK_DOWN: {
					selected = ++selected % files.size();
					break;
				}
				case VK_RETURN: {
					if (buffer.size() > 0) {
						struct stat info;
						
						if (stat(buffer.c_str(), &info) != 0) {
							//Neither file or directory	
							//Use levenstein distance
							std::vector<file> files = this->files;
							std::sort(files.begin(), files.end(), [&](file& a, file& b) {
								return (edit_distance(a.name, buffer) < edit_distance(b.name, buffer));
							});		
							buffer.clear();
							if (files[0].directory) {
								lastDirectory = directory;
								lastSelected = selected;
								getDirectoryFiles(files[0].fullpath.c_str());
								selected = 0;
								break;
							} else {
								f = files[0].fullpath;
								return -1;
							}
							
						} else {
							if (info.st_mode & S_IFDIR) {
								lastDirectory = directory;
								lastSelected = selected;
								selected = 0;
								getDirectoryFiles(buffer.c_str());
								buffer.clear();
								break;
							} else {
								f = buffer;
								return 1;
							}
						}
					}
					
					
					if (files[selected].directory) {				
						//messageDialog b;
						//b.show("Opened: " + files[selected].fullpath);	
								lastDirectory = directory;
								lastSelected = selected;
						getDirectoryFiles(files[selected].fullpath.c_str());
						selected = 0;
						break;
					} else {
						//We selected files
						f = files[selected].fullpath;
						return 1;
					}
					break;
				}
				case VK_HOME: {
						listOffset = 0;
						selected = 0;
					break;
				}
				case VK_END: {					
						selected = files.size() - 1;
						if (listOffset > sizey - 2 - files.size()) listOffset = 0;
						else listOffset = selected > 5 ? selected - 5 : 0;
					break;
				}				
				case VK_LEFT: {
						lastDirectory = directory;
						lastSelected = selected;
						getDirectoryFiles(files[1].fullpath.c_str());
						selected = 0;
					break;
				}
				case VK_RIGHT: {
						if (files[selected].name == "." || !files[selected].directory) {
							getDirectoryFiles(lastDirectory.c_str());
							directory = lastDirectory;
							selected = lastSelected;
						} else
							if (files[selected].directory) {
								lastDirectory = directory;
								lastSelected = selected;
								getDirectoryFiles(files[selected].fullpath.c_str());
								selected = 0;								
						}
					break;
				}
				case VK_INSERT: {
						files[selected].selected = !files[selected].selected;
					break;
				}
				case 0: {
					break;
				}
				default: {
					//fprintf(stderr, "%i\r\n", key);
					if (key < ' ' || key > '~')
						break;
					buffer += key;
					break;
				}
			}
			fill(' ', BWHITE | FBLACK);
			//border(BRED);
			fancyBorder(BORDER_DOUBLE, BRED|FBLACK);
			title("Open file", BRED);
			displayFiles(buffer);
			search.show(buffer.c_str(), FRED | BBLACK | 0b00001000);
			curDir.show(directory.c_str(), FRED | BWHITE);
			adv::draw();
		} while (NOMOD(key = console::readKey()) != VK_ESCAPE);
		//adv::setThreadState(true);
		return 0;
	}	
	
	std::string toStorage(size_t length) {
		const char* units[] = {"B", "K", "M", "G", "T", "P","E","Y","Z"};
		int i = 0;
		double size = length;
		while (size > 1000) {
			size /= 1000;
			i++;
		}		
		std::string ot;
		char buf[50];
		snprintf(&buf[0], 50, "%i   ", int(size));
		snprintf(&buf[3], 40, "%s", units[i]);
		ot = std::string(buf);
		return ot;
	}

	unsigned int edit_distance(const std::string& s1, const std::string& s2) {
		const std::size_t len1 = s1.size(), len2 = s2.size();
		std::vector<std::vector<unsigned int>> d(len1 + 1, std::vector<unsigned int>(len2 + 1));

		d[0][0] = 0;
		for(unsigned int i = 1; i <= len1; ++i) d[i][0] = i;
		for(unsigned int i = 1; i <= len2; ++i) d[0][i] = i;

		for(unsigned int i = 1; i <= len1; ++i)
			for(unsigned int j = 1; j <= len2; ++j)
						  // note that std::min({arg1, arg2, arg3}) works only in C++11,
						  // for C++98 use std::min(std::min(arg1, arg2), arg3)
						  d[i][j] = std::min({ d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + (s1[i - 1] == s2[j - 1] ? 0 : 1) });
		return d[len1][len2];
	}
	
	void displayFiles(std::string& sort) {
		std::vector<file> files = this->files;
		if (sort.size() > 0) { //Levenstehen whatever it
			 std::sort(files.begin(), files.end(), [&](file& a, file& b) {
				return (edit_distance(a.name, sort) < edit_distance(b.name, sort));
			 });
		}
		char buf[sizex + 2];
		buf[sizex + 1] = '\0';
		
		if (listOffset > sizey - 2) 
			listOffset = 0;
		else
			listOffset = selected > 4 ? selected - 5 : 0;
		
		for (int i = 0; i < sizey - 3 && i < files.size() - listOffset; i++) {
			file* f = &files[i + listOffset];
			char sel = f->selected ? 'x' : ' ';
			memset(&buf, ' ', sizex + 1);
			buf[sizex - 1] = '\0';
			int om = snprintf(&buf[0], sizex - 3, "[%c] %s", sel, f->name.c_str());
			buf[om] = ' ';
			om = snprintf(&buf[sizex - 6 < 0 ? 0 : sizex - 6], sizex - 1, "%s", f->directory ? "D   " : toStorage(f->size).c_str());
			char color = i == selected - listOffset ? BGREEN | FBLACK : BWHITE | FBLACK;
			adv::write(offsetx + 1, offsety + i + 2, &buf[0], color);
		}
	}
	
	std::vector<file> files;
	
	std::string getMultipleFiles() {
		
	}
	
	private:
	void getDirectoryFiles(const char* pname) {
		DIR* dir;
		struct dirent* entry;
		
		auto getPath = [](const char* path) {
			char resolvedPath[PATH_MAX];
			#ifdef __linux__
			realpath(path, resolvedPath);
			#elif defined __WIN32
			GetFullPathNameA(path, PATH_MAX, &resolvedPath[0], 0);
			#endif
			return std::string(resolvedPath);
		};
		
		std::string nnn = getPath(pname);
		const char* name = nnn.c_str();
		
		if (!(dir = opendir(name))) {
			messageDialog p;
			p.show("Could not open directory: " + std::string(name));
			p.show("Could not open directory: " + nnn);
			return;
		}
		
		files.clear();
				
		file dup;
		file dthis;
		dthis.directory = dup.directory = true;
		
		dup.name = std::string("..");
		dup.fullpath = getPath((std::string(name) + "/..").c_str());
		dthis.name = std::string(".");
		dthis.fullpath = getPath((std::string(name) + "/.").c_str());
		
		dup.selected = dthis.selected = false;
		dup.highlighted = dthis.highlighted = false;
		dup.size = 0; dthis.size = 0;
		files.push_back(dthis);
		files.push_back(dup);
				
		directory = getPath(name);
		
		
		while ((entry = readdir(dir)) != nullptr) {
			file f;
			struct stat statt;
			f.name = std::string(entry->d_name);
			if (f.name == "." || f.name == "..")
				continue;
			//if (f.directory = entry->d_type == DT_DIR)
			//	f.name += "/";
			f.directory = entry->d_type == DT_DIR;
			f.selected = f.highlighted = false;			
			f.fullpath = std::string(name) + "/" + f.name;
			stat(f.fullpath.c_str(), &statt);
			f.size = statt.st_size;
			files.push_back(f);
		}
				
		if (files.size() > 0)
			files[0].highlighted = true;
			
		closedir(dir);
	}
};

struct saveFileDialog {
	saveFileDialog() {
		
	}
	
	std::string getFile() {
		
	}
};

struct line {
	std::string buffer;
};

struct textEditor : dialog {
	textEditor(FILE* handle) {
		this->handle = handle;
		lineOffset = 0;
		column = 0;
		row = 0;		
		modified = false;
	}
	textEditor(FILE* handle, box box) : dialog(box) {
		this->handle = handle;
		lineOffset = 0;
		column = 0;
		row = 0;	
		modified = false;
	}
	FILE* handle;
	
	#define MAXLINELEN 4096
	void load() {
		char b;
		char buffer[MAXLINELEN];
		memset(buffer, '\0', MAXLINELEN);
		int r = 0;
		lines.clear();
		int i = 0;
		
		line bl;
		
		while ((fread(&b, 1, 1, handle)) > 0) {
			if (b == '\n' || b == '\r') { //New unix line
				if (b == '\r')
					continue;
				bl.buffer = std::string(&buffer[0], r);
				r = 0;
				lines.push_back(bl);
			} else {
				if (r >= MAXLINELEN) {
					bl.buffer = std::string(&buffer[0], r);
					r = 0;
					lines.push_back(bl);
					break;					
				}
				buffer[r++] = b;
			}
		}
		
		bl.buffer = std::string(&buffer[0], r);
		r = 0;
		lines.push_back(bl);
	}
	
	void save() {
		for (auto& line : lines) {
			std::string str = line.buffer + "\r\n";
			fwrite(str.c_str(), 1, str.size(), handle);
		}
	}
	
	void drawLine(line* line, int lineNumber, int x, int y, int maxX) {
		char buf[maxX];
		std::string nBuf = line->buffer;
		//Do replacements
		int pos;
		while ((pos = nBuf.find('\t')) != std::string::npos) {
			nBuf.replace(pos, 1, " ");
			nBuf.insert(pos, "   ");
		}

		int cBufLen = nBuf.size();
		{
			char colorBuffer[cBufLen];
			memset(colorBuffer, FBLUE | BWHITE, cBufLen); //Default text color
			//Do type highlighting
			
			
			//Line number
			int cnt = snprintf(&buf[0], maxX, "%i : \n", lineNumber);
			int cnt2 =snprintf(&buf[cnt-1],maxX-cnt+1,"%s", nBuf.c_str());
			int cnt3 = cnt+cnt2;
			//Prepare to print
			{
				char cbuf2[cnt3];
				memset(cbuf2, FRED | BWHITE, cnt3);
				memcpy(&cbuf2[cnt-1], colorBuffer, cBufLen);
				adv::write(x, y, &buf[0], &cbuf2[0]);
			}
		}
	}

	int row;
	int column;
	int lineOffset;
	bool modified;
	
	void show() {
		char buf[50];
		int key = 0;
		do {			
			fprintf(stderr, "%i\r\n", key);
			if (!HASMOD(key, __CTRL)) {
				switch (NOMOD(key)) {
					case VK_ENTER: {
						if (row < lines.size() - 1) {
							
						} else {
							line l;
							lines.push_back(l);
						}
						row++;					
						break;
					}
					case VK_DOWN: {
						if (row < lines.size() - 1) 
							row++;
						break;
					}
					case VK_UP: {
						if (row > 0)
							row--;
						break;
					}
					case VK_LEFT: {
						if (column > 0)
							column--;
						break;
					}
					case VK_RIGHT: {
						column++;
					}
					case VK_BACKSPACE: {
						if (lines[row].buffer.size() > 0) {
							lines[row].buffer.pop_back();
							modified = true;
						}
					}
					default: {
						//fprintf(stderr, "%i\r\n", key);
						if (NOMOD(key) < ' ' || NOMOD(key) > '~')
							break;
						if (column > lines[row].buffer.size()) {
							//lines[row].buffer += char(NOMOD(key));
							lines[row].buffer.push_back(char(NOMOD(key)));
						} else {
							//lines[row].buffer.insert(column,char(NOMOD(key)), 1);
							lines[row].buffer.push_back(char(NOMOD(key)));
						}
						column++;
						modified = true;
						//buffer += key;
						
						break;
					}
				}
			}
			if (HASMOD(key, __CTRL) && (HASKEY(key, 's') || HASKEY(key, 'S'))) {
				save();
				modified = false;
			}			
			
			fill(' ', BWHITE | FBLACK);
			fancyBorder(BORDER_LINE, FBLACK | BRED);			
			snprintf(&buf[0],50,"File (%i:%i)%c", row, column, modified ? '*' : ' ');
			title(&buf[0], BRED | FBLACK);
			draw();
			adv::draw();
		} while (NOMOD(key = console::readKey()) != VK_ESCAPE);
	}
	
	void draw() {
		for (int y = offsety + 1; y < sizey + offsety - 1; y++) {
			int lineNumber = y - offsety - 1;
			if (lineNumber >= lines.size())
				break;
			
			drawLine(&lines[lineNumber], lineNumber, offsetx + 1, y, sizex - 1);
		}
	}
	
	std::vector<line> lines;
};
